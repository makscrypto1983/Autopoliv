/*
 * –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–æ–π –¥–ª—è Arduino Nano
 * –í–µ—Ä—Å–∏—è —Å –ø–æ–ø–ª–∞–≤–∫–æ–≤—ã–º —Ü–∏—Ñ—Ä–æ–≤—ã–º –¥–∞—Ç—á–∏–∫–æ–º (–∑–∞–º–∫–Ω—É—Ç–æ/—Ä–∞–∑–æ–º–∫–Ω—É—Ç–æ)
 * 
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 * - –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å–æ—Å–∞ (–ø–∏–Ω 2)
 * - –†–µ–ª–µ –Ω–∞—Å–æ—Å–∞ (–ø–∏–Ω 7)
 * - –ü–æ–ø–ª–∞–≤–∫–æ–≤—ã–π –¥–∞—Ç—á–∏–∫ —É—Ä–æ–≤–Ω—è –≤–æ–¥—ã (–ø–∏–Ω 3, digital)
 * - –ù–∞—Å–æ—Å –≤–æ–¥—ã (—É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ —Ä–µ–ª–µ)
 */

const int BUTTON_PIN = 2;         // –ö–Ω–æ–ø–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å–æ—Å–∞
const int RELAY_PIN = 7;          // –†–µ–ª–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å–æ—Å–æ–º  
const int WATER_SENSOR_PIN = 3;   // –ü–æ–ø–ª–∞–≤–∫–æ–≤—ã–π –¥–∞—Ç—á–∏–∫ (—Ü–∏—Ñ—Ä–æ–≤–æ–π –ø–∏–Ω)
const int LED_PIN = 13;           // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥

const unsigned long WEEK_INTERVAL = 7UL * 24UL * 60UL * 60UL * 1000UL; // –ù–µ–¥–µ–ª—è
const unsigned long PUMP_TIMEOUT = 30000; // –ú–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥

// –°–æ—Å—Ç–æ—è–Ω–∏—è
bool pumpState = false;
bool buttonPressed = false;
bool lastButtonState = false;
unsigned long lastWeeklyCheck = 0;
unsigned long pumpStartTime = 0;
int waterLevel = 0; // 0 = –Ω–µ—Ç –≤–æ–¥—ã, 1023 = –≤–æ–¥–∞ –µ—Å—Ç—å (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)

void setup() {
  Serial.begin(9600);
  Serial.println("=== –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥–æ–π –∑–∞–ø—É—â–µ–Ω–∞ ===");

  pinMode(BUTTON_PIN, INPUT_PULLUP);       // –ö–Ω–æ–ø–∫–∞
  pinMode(RELAY_PIN, OUTPUT);              // –†–µ–ª–µ –Ω–∞—Å–æ—Å–∞
  pinMode(WATER_SENSOR_PIN, INPUT_PULLUP); // –ü–æ–ø–ª–∞–≤–∫–æ–≤—ã–π –¥–∞—Ç—á–∏–∫ (—Ä–∞–∑–º—ã–∫–∞–µ—Ç –Ω–∞ GND)
  pinMode(LED_PIN, OUTPUT);                // –°–≤–µ—Ç–æ–¥–∏–æ–¥

  digitalWrite(RELAY_PIN, LOW); // –Ω–∞—Å–æ—Å –≤—ã–∫–ª—é—á–µ–Ω
  digitalWrite(LED_PIN, LOW);   // —Å–≤–µ—Ç–æ–¥–∏–æ–¥ –≤—ã–∫–ª—é—á–µ–Ω

  Serial.println("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!");
}

void loop() {
  readSensors();
  handleButtonPress();
  handleWaterLevel();
  handleWeeklyCheck();
  handlePumpTimeout();
  updateIndicators();
  printStatus();
  serialCommands(); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ Serial
  delay(500);
}

// === –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

void readSensors() {
  // LOW = –∫–æ–Ω—Ç–∞–∫—Ç –∑–∞–º–∫–Ω—É—Ç = –≤–æ–¥–∞ –µ—Å—Ç—å
  bool waterDetected = digitalRead(WATER_SENSOR_PIN) == LOW;

  // –û–±–Ω–æ–≤–ª—è–µ–º waterLevel –¥–ª—è –ª–æ–≥–∏–∫–∏ (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –ø—Ä–æ—à–ª–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π)
  waterLevel = waterDetected ? 1023 : 0;

  // –ö–Ω–æ–ø–∫–∞ —Å –ø–æ–¥—Ç—è–∂–∫–æ–π (–Ω–∞–∂–∞—Ç–∏–µ = LOW)
  bool currentButtonState = !digitalRead(BUTTON_PIN);
  if (currentButtonState && !lastButtonState) {
    buttonPressed = true;
  }
  lastButtonState = currentButtonState;
}

void handleButtonPress() {
  if (buttonPressed) {
    pumpState = !pumpState;
    if (pumpState) {
      startPump("–†—É—á–Ω–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ");
    } else {
      stopPump("–†—É—á–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ");
    }
    buttonPressed = false;
  }
}

void handleWaterLevel() {
  if (waterLevel >= 1023 && pumpState) {
    stopPump("–ë–∞–∫ –ø–æ–ª–Ω—ã–π");
  }

  if (waterLevel <= 0 && !pumpState) {
    Serial.println("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã!");
  }
}

void handleWeeklyCheck() {
  unsigned long currentTime = millis();
  if (currentTime - lastWeeklyCheck >= WEEK_INTERVAL) {
    Serial.println("üîÑ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...");
    if (waterLevel < 1023) {
      startPump("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –¥–æ–ª–∏–≤–∫–∞");
    } else {
      Serial.println("‚úÖ –£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã –≤ –Ω–æ—Ä–º–µ");
    }
    lastWeeklyCheck = currentTime;
  }
}

void handlePumpTimeout() {
  if (pumpState && (millis() - pumpStartTime > PUMP_TIMEOUT)) {
    stopPump("–¢–ê–ô–ú–ê–£–¢ - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ");
    Serial.println("üö® –í–ù–ò–ú–ê–ù–ò–ï: –ù–∞—Å–æ—Å –≤—ã–∫–ª—é—á–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É!");
  }
}

void startPump(String reason) {
  if (!pumpState) {
    pumpState = true;
    digitalWrite(RELAY_PIN, HIGH);
    pumpStartTime = millis();
    Serial.println("üü¢ –ù–∞—Å–æ—Å –í–ö–õ–Æ–ß–ï–ù: " + reason);
  }
}

void stopPump(String reason) {
  if (pumpState) {
    pumpState = false;
    digitalWrite(RELAY_PIN, LOW);
    Serial.println("üî¥ –ù–∞—Å–æ—Å –í–´–ö–õ–Æ–ß–ï–ù: " + reason);
  }
}

void updateIndicators() {
  if (pumpState) {
    digitalWrite(LED_PIN, (millis() / 500) % 2); // –ú–∏–≥–∞–Ω–∏–µ
  } else {
    digitalWrite(LED_PIN, LOW);
  }
}

void printStatus() {
  static unsigned long lastPrint = 0;
  if (millis() - lastPrint > 5000) {
    Serial.println("--- –°–û–°–¢–û–Ø–ù–ò–ï –°–ò–°–¢–ï–ú–´ ---");
    Serial.println("üíß –£—Ä–æ–≤–µ–Ω—å –≤–æ–¥—ã: " + String(waterLevel == 1023 ? "–ü–û–õ–ù–´–ô" : "–ù–ò–ó–ö–ò–ô"));
    Serial.println("üîå –ù–∞—Å–æ—Å: " + String(pumpState ? "–í–ö–õ–Æ–ß–ï–ù" : "–í–´–ö–õ–Æ–ß–ï–ù"));
    Serial.println("‚è±Ô∏è  –î–æ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: " + String((WEEK_INTERVAL - (millis() - lastWeeklyCheck)) / 1000 / 60) + " –º–∏–Ω—É—Ç");
    Serial.println("üïê –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: " + String(millis() / 1000) + " —Å–µ–∫—É–Ω–¥");
    Serial.println("------------------------");
    lastPrint = millis();
  }
}

void serialCommands() {
  if (Serial.available()) {
    String command = Serial.readString();
    command.trim();

    if (command == "status") {
      printStatus();
    } else if (command == "pump_on") {
      startPump("–ö–æ–º–∞–Ω–¥–∞ Serial");
    } else if (command == "pump_off") {
      stopPump("–ö–æ–º–∞–Ω–¥–∞ Serial");
    } else if (command == "help") {
      Serial.println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
      Serial.println("status - –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ");
      Serial.println("pump_on - –≤–∫–ª—é—á–∏—Ç—å –Ω–∞—Å–æ—Å");
      Serial.println("pump_off - –≤—ã–∫–ª—é—á–∏—Ç—å –Ω–∞—Å–æ—Å");
    } else {
      Serial.println("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø–∏—Å–∫–∞.");
    }
  }
}
